'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var controlNumber = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];
var century = {
  1: [1900, 1999], 2: [1900, 1999],
  3: [1800, 1899], 4: [1800, 1899],
  5: [2000, 2099], 6: [2000, 2099],
  7: [1800, 2099], 8: [1800, 2099],
  9: [1800, 2099]
};
var cnp = function cnp(cnpNumber) {

  if (typeof cnpNumber == 'number') {
    cnpNumber += '';
  }

  // check if the number is not invalid
  if (!cnpNumber || typeof cnpNumber != 'string') {
    return false;
  }
  // parse the text into an array of digits
  var cnp = cnpNumber.split("").map(function (character) {
    return character * 1;
  });

  // the cnp must have exactly 13 digits
  if (cnp.length !== 13) {
    return false;
  }

  // check if the first cnp digit is within limits
  // it determins the birth century and the sex
  var sex = cnp[0];
  if (1 <= sex && sex <= 9) {

    //check if the next 6 digits are a valid birthdate
    var year = century[sex][0] + cnp[1] * 10 + cnp[2];
    var month = cnp[3] * 10 + cnp[4];
    var day = cnp[5] * 10 + cnp[6];
    if ((0, _moment2.default)(year + '-' + month + '-' + day, 'YYYY-MM-DD', true /* strict mode */)) {

        //check if the country area is correct
        if (10 * cnp[7] + cnp[8] <= 52) {

          // check if the first 12 digits are according to the control number (the last digit)
          var sum = 0;
          for (var i = 0; i <= 11; i++) {
            sum = sum + cnp[i] * controlNumber[i];
          }
          var control = sum % 11;
          if (control == 10) {
            control = 1;
          }
          if (control == cnp[12]) {
            return true;
          }
        }
      }
  }
  return false;
};

exports.default = cnp;
